@page "/TextAssessmentDetails"
@layout UserLayout


<h3>Your Assessments</h3>
<hr />
@if (isLoading)
{
    <div class="loading-overlay">
        <div class="loading-spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <h3 class="loading-text">Please wait while we Load your Assessment...</h3>
        </div>
    </div>
}
else if (assessmentDetails != null && assessmentDetails.Count > 0)
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Title</th>
                    <th>Date Created</th>
                    <th>Assessment Link</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var assessment in assessmentDetails)
                {
                    <tr>
                        <td>@assessment.Title</td>
                        <td>@assessment.DateCreated.ToString("dd MMM yyyy")</td>
                        <td>
                            <button class="btn btn-info btn-sm" @onclick="() => CopyLinkToClipboard(assessment.AssessmentLink)">
                                Copy Link
                            </button>
                        </td>

                            <div class="copy-toast alert alert-success" style="position: fixed; bottom: 10px; right: 10px; display: @(showCopyToast ? "block" : "none");" >
                                Link Copied!
                            </div>

                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => RetakeAssessment(assessment.Id)">
                                Retake Assessment
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteAssessment(assessment.Id)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p>No assessments available.</p>
}



@code {
    private ICollection<TextAssessmebtDetails?> assessmentDetails ;

    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        assessmentDetails = await _assessment.TextAssessmentDetails();
        await Task.Delay(60);
        if (assessmentDetails != null)
        {
            isLoading = false;
        }
        else
        {
            isLoading = false;
        }
    }

    private bool showCopyToast = false;
    private async Task CopyLinkToClipboard(string link)
    {
        await _jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", link);

        // Show the "Link Copied" notification
        showCopyToast = true;

        // Hide the toast after 2 seconds
        await Task.Delay(2000);
        showCopyToast = false;

        // Trigger UI update
        StateHasChanged();
    }


    private void RetakeAssessment(Guid AssessmentId)
    {
        navigationManager.NavigateTo($"RetakeAssessment/{AssessmentId}");
    }

    private void DeleteAssessment(Guid Id)
    {
        
    }
}

