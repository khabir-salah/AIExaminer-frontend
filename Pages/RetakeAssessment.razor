@page "/RetakeAssessment/{AssessmentId:Guid}"
@layout UserLayout




<h3>Assessment Questions</h3>

<div class="assessment-container">
    @if (Assessment != null)
    {
        <EditForm Model="answers" OnValidSubmit="SubmitAnswers">
            @foreach (var question in Assessment.Question)
            {
                <div class="question-wrapper mb-4">
                    <h5>@question.QuestionText</h5>

                    <div class="options-wrapper">
                        @foreach (var option in question.Options)
                        {

                            <div class="form-check">
                                <input type="radio" id="@GetOptionId(question.QuestionId, option.OptionId)"
                                       name="@question.QuestionId.ToString()"
                                       value="@option.Text"
                                       @onchange="(e) => OnOptionSelected(question.QuestionId, option.Text)"
                                       class="form-check-input" />

                                <label class="form-check-label" for="@GetOptionId(question.QuestionId, option.OptionId)">
                                    @option.Text
                                </label>
                            </div>
                        }
                    </div>
                </div>
            }

            <button type="submit" class="btn">Submit</button>
        </EditForm>
    }
    else
    {
        <p>Loading questions...</p>
    }
</div>




@code{
    [Parameter]
    public Guid AssessmentId { get; set; } = default!;
    private Dictionary<Guid, string> answers = new();
    [Inject] ResultViewModel Result { get; set; } = default!;

    private AssessmentResultResponseModel AssessmentResult = default!;
    private TetakeAssessmentViewModel Assessment = default!;

    protected override async Task OnInitializedAsync()
    {
        Assessment = await _assessment.RetakeAssessment(AssessmentId);
    }

    private void OnOptionSelected(Guid questionId, string selectedOptionText)
    {
        // Update the selected option for the question in the answers dictionary
        answers[questionId] = selectedOptionText;
    }

    private string GetOptionId(Guid questionId, Guid optionId)
    {
        return $"{questionId}-{optionId}";
    }

    private async Task SubmitAnswers()
    {
        var request = new SubmitAssessmentRequest
        {
            Answer = answers,
            AssesmentId = Assessment.AssessmentId
        };

        AssessmentResult = await _assessment.Submit(request);
        Result.AssessmentResult = AssessmentResult;
        navigationManager.NavigateTo("/AssessmentResult");
    }

}
