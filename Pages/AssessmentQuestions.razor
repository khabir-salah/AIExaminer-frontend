 @page "/AssessmentQuestion"
@layout UserLayout
@using Gateway.ClientAI.Models.QuestionGeneration
@using Gateway.ClientAI.Services.QuestionGeneration
@using static Gateway.ClientAI.Models.QuestionGeneration.ResultModel
@using static Gateway.ClientAI.Models.QuestionGeneration.SubmitAssessmentModel
@using static Gateway.ClientAI.Models.QuestionGeneration.GenerateTextViewModel
@using static Gateway.ClientAI.Models.QuestionGeneration.QuestionViewModel
@inject IAssessment _assessment
@inject HttpClient Http
@inject AssessmentService AssessmentService





<h3>Assessment Questions</h3>

<div class="assessment-container">
    @if (AssessmentService.Assessment != null)
    {
        <EditForm Model="answers" OnValidSubmit="SubmitAnswers">
            @foreach (var question in AssessmentService.Assessment.Question)
            {
                <div class="question-wrapper mb-4">
                    <h5>@question.QuestionText</h5>
                    
                    <div class="options-wrapper">
                        @foreach (var option in question.Options)
                        {

                            <div class="form-check">
                            <input type="radio" id="@GetOptionId(question.QuestionId, option.OptionId)"
                               name="@question.QuestionId.ToString()"
                               value="@option.OptionId.ToString()" 
                               @onchange="(e) => OnOptionSelected(question.QuestionId, option.OptionId)" 
                               class="form-check-input" />

                            <label class="form-check-label" for="@GetOptionId(question.QuestionId, option.OptionId)">
                                @option.Text
                            </label>
                        </div>
                        }
                    </div>
                </div>
            }

            <button type="submit" class="btn btn-primary mt-4">Submit</button>
        </EditForm>
    }
    else
    {
        <p>Loading questions...</p>
    }
</div>

@code {
    // private AssessmentResponse assessmentResponse;
    private Dictionary<Guid, Guid> answers = new();
    private ResultViewModel Result { get; set; }
    private AssessmentResultResponseModel Assessment;

    private void OnOptionSelected(Guid questionId, Guid selectedOptionId)
    {
        // Update the selected option for the question in the answers dictionary
        answers[questionId] = selectedOptionId;
    }


    private async Task SubmitAnswers()
    {
        var request = new SubmitAssessmentRequest
        {
            Answer = answers,
            AssesmentId = AssessmentService.Assessment.AssessmentId 
        };

        Assessment = await _assessment.Submit(request);
        Result.AssessmentResult = Assessment;
        navigationManager.NavigateTo("/AssessmentQuestion");
    }

    private string GetOptionId(Guid questionId, Guid optionId)
    {
        return $"{questionId}-{optionId}";
    }

    
}
