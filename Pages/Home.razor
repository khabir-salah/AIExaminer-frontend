<body>

    @page "/"
    @using Gateway.ClientAI.Services.Authentication
    @using Gateway.Services.Authentication






    <div class="pattern">
    <Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />
        @if (showError)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <strong>Error!</strong> @error
                <button type="button" class="btn-close" @onclick="CloseAlert" aria-label="Close"></button>
            </div>
        }
       

        <div class="container">
            <div class="tab-buttons">
                <button id="login-btn" class="@(isLoginActive ? "active" : "inactive")" @onclick="ShowLogin">LOGIN</button>
                <button id="register-btn" class="@(isLoginActive ? "inactive" : "active")" @onclick="ShowRegister">REGISTER</button>
            </div>

            @if (isLoginActive)
            {
                <p class="text-center mb-3">Sign in with:</p>
                <EditForm OnValidSubmit="OnsubmitLogin" Model="@LoginRequest" id="login-form" class="active">
                    <div class="social-buttons">
                        <button type="button" class="btn btn-link btn-floating mx-1">
                            <i class="fab fa-facebook-f"></i>
                        </button>
                        <button type="button" class="btn btn-link btn-floating mx-1" @onclick="Google">
                            <i class="fab fa-google"></i>
                        </button>
                        <button type="button" class="btn btn-link btn-floating mx-1">
                            <i class="fab fa-twitter"></i>
                        </button>
                        <button type="button" class="btn btn-link btn-floating mx-1">
                            <i class="fab fa-github"></i>
                        </button>
                    </div>
                    <div class="input-group">
                        <input type="text" id="login-email" placeholder="Email" @bind-value="@LoginRequest.Email">
                    </div>
                    <div class="input-group">
                        <input type="password" id="login-password" placeholder="Password" @bind-value="@LoginRequest.Password">
                    </div>
                    <div class="form-options">
                        <label><input type="checkbox" checked> Remember me</label>
                        <a href="#">Forgot password?</a>
                    </div>
                    <button type="submit" class="submit-btn">Sign in</button>
                </EditForm>
            }
            else
            {
                <EditForm OnValidSubmit="OnSubmit" Model="@request" FormName="home" id="register-form" class="active">
                    <DataAnnotationsValidator />
                    <p class="text-center mb-3">Sign Up with:</p>
                    <div class="social-buttons">
                        <button type="button" class="btn btn-link btn-floating mx-1">
                            <i class="fab fa-facebook-f"></i>
                        </button>
                        <button type="button" class="btn btn-link btn-floating mx-1" @onclick="Google">
                            <i class="fab fa-google"></i>
                        </button>
                        <button type="button" class="btn btn-link btn-floating mx-1">
                            <i class="fab fa-twitter"></i>
                        </button>
                        <button type="button" class="btn btn-link btn-floating mx-1">
                            <i class="fab fa-github"></i>
                        </button>
                    </div>
                    <div class="input-group">
                        <input type="text" id="register-name" placeholder="First Name" @bind-value="@request.FirstName">
                        <ValidationMessage For="@(() => request.FirstName)" />
                    </div>
                    <div class="input-group">
                        <input type="text" id="register-username" placeholder="Last Name" @bind-value="@request.LastName">
                        <ValidationMessage For="@(() => request.LastName)" />
                    </div>
                    <div class="input-group">
                        <input type="email" id="register-email" placeholder="Email" @bind-value="@request.Email">
                        <ValidationMessage For="@(() => request.Email)" />
                    </div>
                    <div class="input-group">
                        <input type="password" id="register-password" placeholder="Password" @bind-value="@request.Password">
                        <ValidationMessage For="@(() => request.Password)" />
                    </div>
                    <div class="input-group">
                        <input type="password" id="register-repeat-password" placeholder="Repeat password" @bind-value="@request.RepeatPassword">
                        <ValidationMessage For="@(() => request.RepeatPassword)" />
                    </div>
                    <div class="form-options">
                        <label><input type="checkbox" checked> I have read and agree to the terms</label>
                    </div>
                    <button type="submit" class="submit-btn">Sign up</button>
                </EditForm>
            }
        </div>

    </div>


    @code {

        ViewRegisterModel request { get; set; } = new ViewRegisterModel();
        string error;
        LoginRequestModel LoginRequest { get; set; } = new LoginRequestModel();
        private bool isLoginActive = true;
        bool showError = false;



        async Task OnSubmit()
        {
            error = string.Empty;
            try
            {
                await AuthenticationStateProvider.Register(request);
                navigationManager.NavigateTo("/");
            }
            catch (Exception ex)
            {
                error = ex.Message;
                showError = true;
            }
        }

        async Task OnsubmitLogin()
        {

            error = string.Empty;
            try
            {
                await AuthenticationStateProvider.Login(LoginRequest);
                navigationManager.NavigateTo("/UserDashboard");
            }
            catch (Exception ex)
            {
                error = ex.Message;
                showError = true;
            }
        }

        private void ShowLogin()
        {
            isLoginActive = true;
        }

        private void ShowRegister()
        {
            isLoginActive = false;
            // ToastService.ShowSuccess("testtthhhhhh");
        }

        private void CloseAlert()
        {
            showError = false;
        }


        async Task Google()
        {
            await AuthenticationStateProvider.Google();
            navigationManager.NavigateTo("/UserDashboard");
        }
       
    }

</body>